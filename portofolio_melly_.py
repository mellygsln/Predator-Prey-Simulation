# -*- coding: utf-8 -*-
"""Portofolio Melly .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tQ4uPzcnKNp93Jd8jnrkGSGr1EYGEN91
"""

# Import library
import random
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib import colors
import matplotlib
import matplotlib.image as mpimg
import matplotlib.animation as animation
from IPython.display import HTML
from math import *

# Definisi
kosong = 0
mangsa = 1
pemangsa = 2
pemangsa_makan = 3

#Membuat lingkungan awal
lingkungan = [[0 for i in range(50)] for j in range(50)]

#Fungsi untuk mengisi sel dengan pemangsa atau mangsa
def keadaan(probmangsa, probpemangsa, lingkungan):
  m = len(lingkungan)
  n = len(lingkungan[0])
  lingkungan_baru = [[0 for i in range(n)] for j in range(m)]
  for i in range(m):
    for j in range(n):
      rand = random.random()
      if rand < probmangsa:
        lingkungan_baru[i][j] = mangsa
      elif rand < (probmangsa + probpemangsa):
        lingkungan_baru[i][j] = pemangsa
        lingkungan[i][j] = 0
  return lingkungan_baru

# Fungsi untuk mendefenisikan tetangga
def perubahan(lingkungan_baru, lingkungan):
  neighbours = [(0, 1), (1, 0), (-1, 0), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1)]
  lapar = True
# Mengecek tetangga apakah pemangsa atau mangsa
# Jika pemangsa tidak akan berpengaruh
  for i in range(len(lingkungan_baru)):
    for j in range(len(lingkungan_baru[0])):
      simulLen = 30
      for k in range(simulLen):      # k = penanda waktu
        if lapar == False:
          k = k + 2
          lapar = True
        k = k + 1
  for i in range(len(lingkungan_baru)):
    for j in range(len(lingkungan_baru[0])):
      # Jika suatu sel pemangsa
      if lingkungan_baru[i][j] is pemangsa:
        for neighbour in neighbours:
          x, y = neighbour
        #Jika suatu sel mangsa
          if -1 < (i + x) < len(lingkungan_baru) and -1 < (j + y) < len(lingkungan_baru[0]) and lingkungan[i][j] != 0:
            if lingkungan_baru[i+x][j+y] is mangsa:
              lingkungan_baru[i+x][j+y] = kosong
              lingkungan_baru[i][j] = pemangsa_makan
              lingkungan[i][j] = 0
              lapar = False
              break
          # Karena belum makan (tidak ada mangsa), maka mencari lagi yang ada mangsa
          else:
            lapar = True
        if lapar is True:
          lingkungan[i][j] += 1

      # Jika suatu sel pemangsa makan
      elif lingkungan_baru[i][j] is pemangsa_makan:
        lingkungan_baru[i][j] = pemangsa
        lingkungan[i][j] = 0
  kelaparan(lingkungan_baru, lingkungan)
  return lingkungan_baru

def move(lingkungan_baru, lingkungan):
  steps = [(0,1), (1, 0), (0, -1), (-1, 0)]
  for i in range(len(lingkungan_baru)):
    for j in range(len(lingkungan_baru[0])):
      if lingkungan_baru[i][j] is not kosong:
        step = random.choice(steps)
        x, y = step #x: baris, y: kolom

        if -1 < (i + x) < len(lingkungan_baru) and -1 < (j + y) < len(lingkungan_baru[0]) and lingkungan_baru[i+x][j+y] is kosong:
          lingkungan_baru[i+x][j+y] = lingkungan_baru[i][j]
          lingkungan[i+x][j+y] = lingkungan[i][j]
          lingkungan_baru[i][j] = kosong
          lingkungan[i][j] = 0

      else:
        lingkungan_baru[i][j] = kosong
  return lingkungan_baru

#Predator akan mati jika pada iterasi ke 4 tidak makan makan
def kelaparan(lingkungan_baru, lingkungan): # Procedure need no return
  for i in range(len(lingkungan)):
    for j in range(len(lingkungan[0])):
      if lingkungan[i][j] > 4:
        lingkungan_baru[i][j] = kosong

# initialize dan memanggil fungsi
A = keadaan(0.07, 0.03, lingkungan)
B = perubahan(move(A, lingkungan), lingkungan)
simulLen = 30
# Menyiapkan figure, heatmap
fig = plt.figure()
ax = sns.heatmap(A, vmin=0, vmax=3)
# Fungsi init
def init():
    plt.clf()
    ax = sns.heatmap(A, vmin=0, vmax=3)
    return None
# Fungsi iterasi animasi
def animate(i):
    plt.clf()
    global B
    if i == 0:
      B = perubahan(move(A, lingkungan), lingkungan)
    else:
      B = perubahan(move(B, lingkungan), lingkungan)
    ax = sns.heatmap(B, vmin=0, vmax=3)
    return None
# Fungsi init+
anim = animation.FuncAnimation(fig, animate, frames=range(simulLen), blit=False, interval=150, init_func=init)
# Kode tambahan jika dijalankan di colab/jupyter
from matplotlib import rc
from IPython.display import HTML
rc('animation', html='jshtml')
anim